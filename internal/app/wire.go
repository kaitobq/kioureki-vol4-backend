//go:build wireinject

package app

import (
	"kioureki-vol4-backend/internal/app/config"
	"kioureki-vol4-backend/internal/app/container"
	"kioureki-vol4-backend/internal/controller"
	"kioureki-vol4-backend/internal/domain/service"
	"kioureki-vol4-backend/internal/infra/db"
	"kioureki-vol4-backend/internal/usecase"
	"kioureki-vol4-backend/pkg/database"

	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

func New() (*container.App, error) {
	wire.Build(
		provideGinEngine,
		config.New,
		config.NewDBConfig,
		database.New,
		
		// service
		service.NewTokenService,
		
		container.NewApp,
		container.NewCtrl,

		// user
		controller.NewUserController,
		usecase.NewUserUsecase,
		db.NewUserRepository,

		// organization
		controller.NewOrganizationController,
		usecase.NewOrganizationUsecase,
		db.NewOrganizationRepository,

		// membership
		controller.NewUserOrganizationMembershipController,
		usecase.NewUserOrganizationMembershipUsecase,
		db.NewUserOrganizationMembershipRepository,
	)

	return nil, nil
}

func provideGinEngine() *gin.Engine {
	return gin.Default()
}


// // Code generated by Wire. DO NOT EDIT.

// //go:generate go run -mod=mod github.com/google/wire/cmd/wire
// //go:build !wireinject
// // +build !wireinject

// package app

// import (
// 	"github.com/gin-gonic/gin"
// 	"go-template/internal/app/config"
// 	"go-template/internal/app/container"
// 	"go-template/internal/controller"
// 	"go-template/internal/infra/db"
// 	"go-template/internal/usecase"
// 	"go-template/pkg/database"
// )

// // Injectors from wire.go:

// func New() (*container.App, error) {
// 	engine := provideGinEngine()
// 	dbConfig := config.NewDBConfig()
// 	databaseDB, err := database.New(dbConfig)
// 	if err != nil {
// 		return nil, err
// 	}
// 	userRepository := db.NewUserRepository(databaseDB)
// 	userUsecase := usecase.NewUserUsecase(userRepository)
// 	userController := controller.NewUserController(userUsecase)
// 	containerContainer := container.NewCtrl(userController)
// 	configConfig := config.New()
// 	app := container.NewApp(engine, containerContainer, configConfig, databaseDB)
// 	return app, nil
// }

// // wire.go:

// func provideGinEngine() *gin.Engine {
// 	return gin.Default()
// }
